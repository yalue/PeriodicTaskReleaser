# This script parses all trace_gpu_<pid> CSV files in the current directory.
# These files are generated by running the following nvprof command to
# profile CUDA processes:
#
# nvprof --csv -u ms --print-gpu-trace --log-file trace_gpu_%p \
#   --profile-all-processes
#
# This script will generate a javascript file, all_data.js, containing a JSON
# variable that can be displayed using the timeline webpage (contained in the
# timeline subdirectory).
require 'json'

# Takes a filename, returns an array of the form:
# [[start, duration, event name, stream], [...], ...], where start is the time,
# in ms, at which an event started, duration is the event's duration in ms, and
# the event name is a string saying what the event was (kernel name, etc.). The
# stream field is a string corresponding to the stream in which the event
# occurred.
def get_file_events(filename)
  lines = []
  File.open(filename, 'rb') {|f| lines = f.read.split(/\n+/)}
  pid = "unkown PID"
  if filename =~ /trace_gpu_(\d+)/
    pid = $1
  end
  to_return = []
  lines.each do |line|
    next if line !~ /\d+,\d+/
    # Remove arguments to functions in (), since they'll contain commas.
    line.gsub!(/\([^\)]+\)/, "()")
    line.gsub!(/\[[^\]]+\]/, "[]")
    columns = line.split(",")
    start_time = columns[0].to_f
    duration = columns[1].to_f
    event = columns[-1].gsub(/"/, "")
    stream = "PID #{pid}, stream #{columns[-2].to_s}"
    to_return << [start_time, duration, event, stream]
  end
  to_return
end

# Do initial file parsing
files = Dir["./trace_gpu_*"]
parsed_files = files.map {|f| get_file_events(f)}

# Separate data by unique streams within a PID
all_data = {}
parsed_files.each do |event_list|
  event_list.each do |event|
    stream = event[3]
    all_data[stream] = [] if !all_data.include?(stream)
    all_data[stream] << event[0..2]
  end
end

# Format the output javascript
File.open('all_data.js', 'wb') do |f|
  f.print("var all_data = ")
  f.puts(JSON.pretty_generate(all_data))
end
